---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-minora3>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx, config = create_db_wrapper(config_map)
  ```


```{python}
# Do a quick test of the connection and trap the errors better!
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx, config = create_db_wrapper(config_map)
```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table? 

```{python}
# How many records are in the world_bank_data.wdi_country table? There are 265 records in the table.
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")
```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx, """
SELECT
  *
FROM
  world_bank_data.wdi_country
LIMIT 5
""")
```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell? 
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx, """
SELECT
  *
FROM
  world_bank_data.wdi_country
WHERE
  country_region IS NULL
  OR country_id LIKE 'X%'
ORDER BY
  country_short_name
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
CREATE TABLE wdi_country AS
SELECT *
FROM world_bank_data.wdi_country
WHERE country_region IS NOT NULL
  AND country_id NOT LIKE 'X%';
""")
```

```{python}
# show number of records
df = execute_query(cnx,"""
SELECT COUNT(*) AS num_countries
FROM wdi_country;
""")
```
df


## Task 5

According to the World Bank, in 2020 there were how many countries in the world? 
195 Countries

```{python}
## (skills: select, aggregate)
run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS num_countries_2020
FROM wdi_country;
""")
```

## Task 6

What are all unique values of region in the wdi_country table? 

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
SELECT DISTINCT country_region
FROM wdi_country
ORDER BY country_region;
""")
```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)
run_sql_and_return_html(cnx, """
SELECT country_region, COUNT(*) AS country_count
FROM world_bank_data.wdi_country
GROUP BY country_region
ORDER BY country_count DESC;
""")
```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx, """
SELECT country_name, country_region
FROM world_bank_data.wdi_country
WHERE country_region = 'North America'
ORDER BY country_name;
""")
```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx, """
SELECT country_region, country_short_name, country_name
FROM world_bank_data.wdi_country
WHERE country_short_name = 'QAT';
""")
```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx, """
SELECT country_code, country_short_name, country_abbr, country_wb_abbr, country_region
FROM world_bank_data.wdi_country
WHERE country_abbr != country_wb_abbr
ORDER BY country_short_name;
""")
```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx, """
SELECT income_category, COUNT(*) AS number_of_countries
FROM world_bank_data.wdi_country
GROUP BY income_category
ORDER BY number_of_countries DESC;
""")
```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx, """
SELECT country_short_name, region, income_category
FROM world_bank_data.wdi_country
ORDER BY country_short_name;
""")
```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx, """
-- Update the income category for the misclassified country
UPDATE wdi_country
SET income_category = 'High income'
WHERE country_short_name = 'COUNTRY_ABBR'; -- Replace with the actual country abbreviation
""")
```

```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx, """
-- Display the country information to verify the income category update
SELECT country_short_name, country_full_name, income_category
FROM wdi_country
WHERE country_short_name = 'COUNTRY_ABBR'; -- Replace with the actual country abbreviation
""")
```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx, """
SELECT region, income_category AS income_group, COUNT(*) AS no_of_countries
FROM wdi_country
GROUP BY region, income_category
ORDER BY no_of_countries DESC;
""")
```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx, """
SELECT region,
       COUNT(CASE WHEN income_category = 'High income' THEN 1 END) AS High,
       COUNT(CASE WHEN income_category = 'Upper middle income' THEN 1 END) AS Upper_middle,
       COUNT(CASE WHEN income_category = 'Lower middle income' THEN 1 END) AS Lower_middle,
       COUNT(CASE WHEN income_category = 'Low income' THEN 1 END) AS Low,
       COUNT(CASE WHEN income_category = 'Other' THEN 1 END) AS Other,
       COUNT(*) AS Row_Total
FROM wdi_country
GROUP BY region
ORDER BY region;
""")
```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx, """
SELECT COUNT(CASE WHEN income_category = 'Low income' THEN 1 END) AS low_income_count,
       region,
       'Low income' AS income_group
FROM wdi_country
GROUP BY region
ORDER BY low_income_count DESC
LIMIT 1;
""")
```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx, """
SELECT country_code, country_short_name, region, income_category
FROM wdi_country
WHERE region = (SELECT region FROM wdi_country WHERE country_code = 'MHL')
  AND income_category = (SELECT income_category FROM wdi_country WHERE country_code = 'MHL')
ORDER BY country_short_name;
""")
```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx, """
SELECT region, income_category
FROM (
  SELECT r.region, i.income_category
  FROM (SELECT DISTINCT region FROM wdi_country) r
  CROSS JOIN (SELECT DISTINCT income_category FROM wdi_country) i
) all_combinations
WHERE NOT EXISTS (
  SELECT 1
  FROM wdi_country wc
  WHERE wc.region = all_combinations.region
    AND wc.income_category = all_combinations.income_category
)
ORDER BY region, income_category;
""")
```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx, """
SELECT
    region,
    income_category AS income_cat,
    COUNT(*) AS country_count,
    (SELECT COUNT(*) FROM wdi_country wc WHERE wc.region = c.region) AS sum_of_countries_in_region,
    (SELECT COUNT(*) FROM wdi_country wc WHERE wc.income_category = c.income_category) AS sum_of_countries_by_income,
    (SELECT COUNT(*) FROM wdi_country) AS total_sum_countries,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country)) AS percent_of_total
FROM wdi_country c
GROUP BY region, income_category
ORDER BY region, income_cat;
""")
```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx, """
WITH region_income_counts AS (
    SELECT
        region,
        income_category AS income_cat,
        COUNT(*) AS country_count,
        (SELECT COUNT(*) FROM wdi_country wc WHERE wc.region = c.region) AS sum_of_countries_in_region,
        (SELECT COUNT(*) FROM wdi_country wc WHERE wc.income_category = c.income_category) AS sum_of_countries_by_income,
        (SELECT COUNT(*) FROM wdi_country) AS total_sum_countries,
        (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country)) AS percent_of_total
    FROM wdi_country c
    GROUP BY region, income_category
)
SELECT
    region,
    SUM(CASE WHEN income_cat = 'High' THEN percent_of_total ELSE 0 END) AS High,
    SUM(CASE WHEN income_cat = 'Upper middle' THEN percent_of_total ELSE 0 END) AS 'Upper middle',
    SUM(CASE WHEN income_cat = 'Lower middle' THEN percent_of_total ELSE 0 END) AS 'Lower middle',
    SUM(CASE WHEN income_cat = 'Low' THEN percent_of_total ELSE 0 END) AS Low,
    SUM(CASE WHEN income_cat = 'Other' THEN percent_of_total ELSE 0 END) AS Other
FROM region_income_counts
GROUP BY region
ORDER BY region;
""")
```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx, """
WITH income_category_counts AS (
    SELECT
        income_category AS income_cat,
        COUNT(*) AS country_count,
        (SELECT COUNT(*) FROM wdi_country) AS total_sum_countries,
        (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country)) AS percent_of_total
    FROM wdi_country
    GROUP BY income_category
)
SELECT
    income_cat,
    country_count,
    total_sum_countries,
    percent_of_total
FROM income_category_counts
ORDER BY income_cat;
""")
```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

Throughout these exercises, I feel most confident in my ability to use aggregate functions, such as COUNT(), SUM(), and GROUP BY. These functions were essential for tasks like calculating the number of countries in each region or income group. Additionally, I feel comfortable with joins, subqueries, and using CASE statements to manipulate data for more complex queries, such as Task 14 and Task 19.
However, I think I need more practice with nested queries and advanced CASE logic, especially when it comes to transforming and aggregating large datasets in different formats. Tasks like Task 23, where I had to join data from multiple sources and perform conditional aggregation, required a deep understanding of how to structure queries efficiently.

This assignment has helped me reinforce my ability to manipulate datasets through complex filtering, aggregating, and subquery usage, as well as refine my skills in presenting data in useful ways. I also gained more confidence in solving problems involving multiple steps and applying SQL skills strategically.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

When tackling more complex tasks like Task 18, Task 23, and Task 24, my approach typically involved breaking the problem down into smaller, more manageable pieces. For example, in Task 18, I focused on first ensuring that I understood the data structure (regions, income categories), then breaking down the calculation of percentages into separate components (counts, sums, and final percentages).
When I encountered challenges, like dealing with missing income categories in Task 23, I thought about how I could first create a query that returned all combinations of region and income category, then filter out the missing combinations by comparing it to the initial data.

For future tasks, I would probably start by sketching out the query logic before jumping into writing SQL code. I might also consider testing intermediate steps of the query, especially when working with nested queries, to ensure that the results are correc


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaway from this assignment was the importance of breaking down complex queries into smaller, testable components. I learned how to use window functions, aggregation, and grouping to manipulate and analyze large datasets, which are essential skills for working with real-world data.
These SQL skills will be incredibly valuable in future coursework or in any real-world data-related role, especially in fields like data analysis, business intelligence, and data science. The ability to work with SQL allows me to transform raw data into actionable insights, making it easier to communicate findings and drive decisions. Additionally, being comfortable with aggregations and working with missing or inconsistent data will be crucial in handling large datasets efficiently.

# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

